#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define clr(x) x.clear()

#ifndef ONLINE_JUDGE
#define gc getchar
#else
#define gc getchar_unlocked
#endif

const int MOD=1e9+7;

typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vii> vvii;
typedef long long LL;

int read_int()
{
    char c = gc();
    while(c<'0' || c>'9') c = gc();
    int ret = 0;
    while(c>='0' && c<='9')
    {
        ret = 10 * ret + c - 48;
        c = gc();
    }
    return ret;
}
//25/10/14
//shankul khare
//count number of triangles
//14:37
struct node
{
    int data;
    node*left;
    node*right;
    int horizontal_distance;
};
node*NewNode(int data)
{
    //node*temp;
    node *temp=new node();
    temp->data=data;
    temp->left=NULL;
    temp->right=NULL;
    temp->horizontal_distance=0;
    return temp;
}
int count_number_of_triangles(int arr[],int n)
{
    int si=n;
    int j=1,i=0;
    int k=si-1,ans=0;

    for(i=0;i<n-2;i++)
    {
            k=n-1;
        for(j=i+1;j<n-1;j++)
        {
            k=n-1;
            while((arr[i]+arr[j]<=arr[k])&&(k>j))
                k--;
            if(k>j)
            ans+=(k-j);
        }

            //k=si-1;
    }
    return ans;
}
int main()
{
    freopen("input.txt","r",stdin);

   /* node *A=NewNode(1);
    A->left=NewNode(2);
    A->left->left=NewNode(4);
    A->left->right=NewNode(5);
    A->right=NewNode(3);
    A->right->left=NewNode(6);
    A->right->right=NewNode(7);
//    vertical_sum_in_a_tree(A);
//    cout<<height_without_recursion(A);// reverse_levelorder(A);
  //  queue<node*>que;
    //cout<<que.size()<<" \n";
    //que.push(NULL);
    //cout<<que.front()<<"\n";
    vertical_order_of_a_tree(A);
    */
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
        cin>>arr[i];
      //c/out<<sizeof(arr)/sizeof(int);
        sort(arr,arr+n);
        cout<<arr[0]<<" "<<arr[1]<<"dsfsdfds\n";
    cout<<count_number_of_triangles(arr,n);
    return 0;
}
